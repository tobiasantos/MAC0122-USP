#------------------------------------------------------------------
# LEIA E PREENCHA O CABEÃ‡ALHO 
# NÃƒO ALTERE OS NOMES DAS FUNÃ‡Ã•ES
# NÃƒO APAGUE OS DOCSTRINGS
#------------------------------------------------------------------

'''

    Nome:Tobias dos Santos Neto
    NUSP: 11848688

    Ao preencher esse cabeÃ§alho com o meu nome e o meu nÃºmero USP,
    declaro que todas as partes originais desse exercÃ­cio programa
    foram desenvolvidas e implementadas por mim ou por meu time 
    cujos nomes estÃ£o relacionados abaixo e que, portanto, nÃ£o 
    constituem desonestidade acadÃªmica ou plÃ¡gio.
    
    Entendo que EPs sem assinatura devem receber nota zero e, ainda
    assim, poderÃ£o ser punidos por desonestidade acadÃªmica.

    Declaro tambÃ©m que sou responsÃ¡vel por todas as cÃ³pias desse
    programa e que nÃ£o distribui ou facilitei a sua distribuiÃ§Ã£o.
    
    Estou ciente que os casos de plÃ¡gio e desonestidade acadÃªmica
    estarÃ£o sujeitos Ã s penalidades descritas na pÃ¡gina da disciplina
    na seÃ§Ã£o "Sobre colaboraÃ§Ã£o em MAC0122".

    ReconheÃ§o que utilizei as seguintes fontes externas ao conteÃºdo 
    utilizado e recomendado em MAC0122, ou recebi auxÃ­lio das pessoas
    listadas abaixo, e incluo tambÃ©m os nomes de colegas
    do meu time caso essa tenha sido uma atividade em grupo.

    - LISTA de colegas do time 
        - nÃ£o foi uma atividade em grupo (substitua essa linha caso tenha sido)

    - LISTA de fontes externas utilizadas (links ou referÃªncias como livros)
        - 

    - LISTA de outras pessoas que colaboraram na realizaÃ§Ã£o do trabalho e
        externas ao grupo.
        - 
'''

# ===================================================================

def main():
    '''
        Programa main usado para teste da classe Fraction 
        e pode ser usada tambÃ©m para testar as suas funÃ§Ãµes
        HFmaior e HFmenor, que devem usar obrigatoriamente a
        classe Fraction.

        Execute esse programa antes de escrever suas funÃ§Ãµes e
        estude a saÃ­da de cada teste da classe Fraction abaixo, 
        lendo os comentÃ¡rios para entender o comportamento da classe 
        antes de escrever suas funÃ§Ãµes HFmaior() e HFmenor().  
    '''

    # CriaÃ§Ã£o de objetos do tipo Fraction 
    frac25 = Fraction(2,5)
    print(f"Fraction(2,5) = {frac25}")

    frac12 = Fraction(1,2)
    frac13 = Fraction(1,3)
    frac01 = Fraction(   )  # chamada 'sem' argumentos para testar valores default

    # chamada direta do mÃ©todo __str__() -- nÃ£o fazemos isso normalmente!!
    print(f"frac01.__str__() = {frac01.__str__()}")
    # mas podemos usar o str() que chama o mÃ©todo __str__
    print(f"str(frac01) = {str(frac01)}")
    # e a funÃ§Ã£o print() tambÃ©m chama o __str__ automaticamente
    # essas chamadas ficam "escondidas" para facilitar a leitura do cÃ³digo.
    print(f"Fraction()    = {frac01}")

    print(f"Fraction(1,2) = {frac12}")
    print(f"Fraction(1,3) = {frac13}")

    # mÃ©todos distintos para soma de duas fraÃ§Ãµes
    print(f"frac12 + frac13 = {frac12 + frac13}")
    print(f"frac12.some(frac13) = {frac12.some(frac13)}")

    # hmmm usar o operador + parece mais fÃ¡cil... 
    # como fica com atribuiÃ§Ã£o?
    soma = frac12 + frac13
    print(f"soma = {soma}")
    soma = soma + frac25
    print(f"soma = {soma}")

    ### coloque aqui os testes para as funÃ§Ãµes HFmaior e HFmenor
    n = 10
    hma = HFmaior(n)
    print(f"Resultado de HFmaior({n}) = {hma}")
    hme = HFmenor(n)
    print(f"Resultado de HFmenor({n}) = {hme}")

# ===================================================================

def HFmaior( n ):
    ''' 
    (int) -> fraction
    recebe um inteiro positivo e devolve o número harmônico de ordem 'n'
    escrito em fração calculado do maior termo até o menor
    '''
    Hmaior = Fraction()
    cont = 1
    while cont <= n:
        Hmaior += Fraction(1,cont)
        cont += 1
    
    return Hmaior

# ===================================================================

def HFmenor( n ):
    ''' 
    (int) -> fraction
    recebe um inteiro positivo e devolve o número harmônico de ordem 'n'
    escrito em fração calculado do menor termo até o maior
    '''
    Hmenor = Fraction()
    cont = n
    while cont > 0:
        Hmenor += Fraction(1,cont)
        cont -= 1
        
    return Hmenor

# ===================================================================


# ===================================================================
#   No futuro substituiremos a definiÃ§Ã£o da classe por um import. 
#   Como primeiro exercÃ­cio de POO, leia o cÃ³digo da classe Fraction 
#   abaixo e verifique o quanto esse cÃ³digo Ã© semelhante ao do livro. 
#   
#   NÃƒO ALTERE O CÃ“DIGO DA CLASSE FRACTION
#
# ===================================================================

class Fraction:
    '''
        Essa classe Fraction foi adaptada da seÃ§Ã£o 1.13.1 Uma Classe Fraction
        do capÃ­tulo 1 do livro ResoluÃ§Ã£o de Problemas com Algoritmos e 
        Estruturas de Dados usando Python disponÃ­vel no endereÃ§o
        https://panda.ime.usp.br/panda/static/pythonds_pt/index.html. 

        A classe Fraction representa uma fraÃ§Ã£o. 
        Uma fraÃ§Ã£o Ã© constituÃ­da por um numerador e um denominador, 
        ambos inteiros, como por exemplo 2/5 (dois quintos), 
        onde 2 Ã© o numerador e 5 o denominador.
    '''

    def __init__(self, cima=0, baixo=1):
        '''(Fraction, int, int) --> None

        Chamado pelo construtor da classe. 

        Recebe uma referÃªncia `self` ao objeto que estÃ¡ sendo
        construÃ­do/montado e os inteiros cima e baixo que representam
        a fraÃ§Ã£o.

        Exemplos:

        >>> frac = Fraction(2,5) # construtor chama __init__()
        >>> frac.num
        2
        >>> frac.den
        5
        >>> f01 = Fraction() # construtor chama __init__()
        >>> f01.num
        0
        >>> f01.den
        1
        '''
        self.num = cima
        self.den = baixo

    def __str__(self):
        '''(Fraction) -> str

        Recebe uma referencia `self` a um objeto da classe Fraction e
        cria e retorna a string que representa o objeto.

        Utilizado por print() para exibir o objeto.
        FunÃ§Ã£o str() retorna a string criada pelo mÃ©todo __str__() da classe  

        Exemplos:

        >>> frac = Fraction(2,5)
        >>> frac.__str__()
        '2/5'
        >>> print(frac)
        2/5
        '''
        return f"{self.num}/{self.den}"

    def some(self,other):
        ''' (Fraction, Fraction) -> Fraction

        Recebe uma referencia `self` a um objeto da classe Fraction e
        outra referÃªncia `other` para outro objeto da classe Fraction, e
        cria e retorna um objeto da classe Fraction contendo a soma das
        fraÃ§Ãµes self e other.

        Exemplo:
        >>> f0 = Fraction(1, 2)
        >>> f1 = Fraction(1, 3)
        >>> f3 = f0.some(f1)
        >>> print(f3)
        5/6
        '''
        novonum = self.num*other.den + self.den*other.num
        novoden = self.den * other.den
        return Fraction(novonum,novoden)

    def __add__(self,other):
        ''' (Fraction, Fraction) -> Fraction

        Recebe uma referencia `self` a um objeto da classe Fraction e
        outra referÃªncia `other` para outro objeto da classe Fraction, e
        cria e retorna um objeto da classe Fraction contendo a soma das
        fraÃ§Ãµes self e other.

        O __add__ Ã© um mÃ©todo especial, indicados pelo par caracteres
        underscores (`__`) antes e depois da palavra `add`, que substitui
        o operador `+` usado para soma de objetos da classe Fraction.

        Exemplo:
        >>> f0 = Fraction(1, 2)
        >>> f1 = Fraction(1, 3)
        >>> f3 = f0.some(f1)
        >>> print(f3)
        5/6
        '''
        novonum = self.num*other.den + self.den*other.num
        novoden = self.den * other.den
        return Fraction(novonum,novoden)


## =============================================================
#  fim da definiÃ§Ã£o de todas as funÃ§Ãµes e classes
#  chama a main
## =============================================================
if __name__ == "__main__":
    main()